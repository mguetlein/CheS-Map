# general: libraries ###################################

lib.openbabel = Open Babel: The Open Source Chemistry Toolbox (http://openbabel.org)
lib.cdk = The Chemistry Development Kit (CDK) (Version {0}, see http://cdk.sourceforge.net)
lib.r = The R Project for Statistical Computing (http://www.r-project.org)
lib.weka = WEKA : Data Mining Software in Java (Version {0}, see http://www.cs.waikato.ac.nz/ml/weka)

# wizard : general ###################################

error.no-features = Clustering and embedding require compound features. You have no features selected.\n\
Please select features in step 3., or disable clustering and embedding.


# wizard : dataset ###################################

dataset.title = Load Dataset
dataset.desc = Select a dataset from your file system for clustering, embedding and visualization.

# wizard: build 3d ###################################

build3d.title = Create 3D Structures
build3d.desc = Compute 3D coordinates for all compounds in the dataset.
build3d.info.cached = 3D structures already built with {0} (result was cached, no time consuming re-computation needed)
build3d.warn.already-3d = 3D already available in dataset ´{0}´ (at least one z-coordinate is set), this will override the original 3D structure
build3d.warn.3d-missing = 3D is NOT available in dataset ´{0}´ (all z-coordinates are 0). 2D flat structures are later shown in the viewer.
build3d.slow = Building 3D structures might take a while (up to a minute per compound). \
The result will be stored, so this computation is only performed once.

# build 3d methods

build3d.no-3d = No 3D Structure Generation (use original structures)
build3d.no-3d.desc = Does NOT create 3D structures (leaves the dataset as it is).

build3d.cdk = CDK 3D Structure Generation
build3d.cdk.desc = Uses {0}\n\
The ModelBuilder3D supports 2 different forcefields. Tends to be faster but less accurate then OpenBabel.\n\n\
CDK API: http://pele.farmbio.uu.se/nightly/api/org/openscience/cdk/modeling/builder3d/ModelBuilder3D.html

build3d.openbabel = OpenBabel 3D Structure Generation
build3d.openbabel.desc = Uses {0}\n\
The 'gen3d' option is used to compute 3D coordinates.\n\
(More info: http://openbabel.org/wiki/Tutorial:Basic_Usage)

# wizard : features ###################################

features.title = Extract Features
features.desc = Features may already be included in the dataset, or they can be created with various algorithms. The selected features are used for the clustering and/or 3D embedding.
features.desc.long = The available features are shown in the left panel. Select a (or a group of) feature(s) and click ´{0}´. \
The selected features - shown in the right panel - will be used for clustering and/or embedding.\n\n\
The clustering/embedding result relies on the selected features. For example, select structural features (e.g. OpenBabel Fingerprint FP2) \
to cluster structural similar compounds together and to place structural similar compounds close together in 3D space.\n\n\
Consider carefully how many/which feature/s to chose. Select only a handful of features to increase the influence of each \
single feature on the clustering and embedding. Selecting a larger number of features will effect the clustering and embedding result \
to represent 'overall' similarity.
features.slow = Feature computation may take some time for some of the selected features. \
The computed feature values are cached, so you have to compute them only once for each dataset.

features.integrated = Included in the Dataset
features.integrated.desc = Features that are already included in the provided dataset.\n\
Not all features may be suitable for clustering and/or embedding (like for example SMILES strings, or info text).

features.cdk = CDK Descriptors
features.cdk.desc = Uses {0}\n\
This integrated library can compute a wide range of numeric chemical descriptors (like LogP or Weight).

features.ob = OpenBabel Descriptors
features.ob.desc = Uses {0}\n\
OpenBabel can compute several simple molecular descriptors. Documentation can be found here: http://openbabel.org/wiki/--filter_option

features.struct = Structural Fragments
features.struct.desc = Structural fragments are molecular subgraph that are defined via smarts strings.\n\
Each fragment is used as a binary nominal feature (1 => subgraph occurs, 0 => subgraph does not occur).\n\
Copy a smarts.csv into the following folder to integrate any structural fragments: {0}\n\
Each line in the csv-file should have 2 values, name of the smarts string and the smarts string itself. \
Comments (starting with '#') will be printed as description. Example csv file:\n\
"Benzene","c1ccccc1"\n\
"Carbonyl with Carbon","[CX3](=[OX1])C"
features.struct.fp2 = OpenBabel Linear Fragments (FP2)
features.struct.fp2.desc = FP2 - Indexes linear fragments up to 7 atoms.
features.struct.fp3 = OpenBabel FP3
features.struct.fp3.desc = FP3 - SMARTS patterns specified in the file patterns.txt
features.struct.fp4 = OpenBabel FP4
features.struct.fp4.desc = FP4 - SMARTS patterns specified in the file SMARTS_InteLigand.txt
features.struct.maccs = OpenBabel MACCS
features.struct.maccs.desc = MACCS - SMARTS patterns specified in the file MACCS.txt

# wizard : cluster dataset ###################################

cluster.title = Cluster Dataset
cluster.desc = Divides a dataset into clusters (i.e. into subsets of compounds)
cluster.info.fixed-k = This cluster algorithm returns a fixed number of clusters (set property ´{0}´).

# cluster methods

cluster.no-cluster = No Dataset Clustering
cluster.no-cluster.desc = No clustering is performed. This will embed all structures directly into 3D space without separating them into clusters. \
This is a valid option especially for smaller datasets (but can be used for any dataset size).

cluster.weka.cobweb.desc = Performs hierarchical conceptual clustering.\
It computes CU (category utility) of nodes in the hierarchical tree, in order to merge/split/insert nodes. Parameters:\n\
<b>acuity</b>: CU is computed based on the features standard deviations. Acuity defines a minimum value for the standard deviation. \
The lower acuity is, the more clusters will be created. (Only relevant for numeric features.)\n\
<b>cutoff</b>: The minimum-threshold for CU to merge/split/insert nodes. The lower the cutoff is, the more clusters will be created

cluster.weka.em = Expectation Maximization
cluster.weka.em.desc = EM (Expectation Maximization) clustering models the data as mixture of Gaussians. \
Each cluster is represented by one Gaussian distribution.

cluster.weka.hierarchical = Hierarchical
cluster.weka.hierarchical.desc = Starts with each compound as a single cluster. Subsequently merges the two most similar clusters.\n\
Similarity is computed according to the parameter <b>linkType</b> (see for possible types below).

cluster.weka.kmeans.desc = Assigns compounds to k randomly initialized centroids. \
Iteratively updates centroid positions and re-assignes compounds until the algorithm converges.\n\
<b>Limitation:</b> This method performs only one random initialisation. \
The cluster algorithm <i>{0}</i> should be preferred.

cluster.weka.farthest.desc = <i>k</i>-Means method with particular centroid initialization: It \
starts with a random data point (compound), and chooses the point furthest from it. Subsequently, the point that \
is furthest away from the already chosen points is selected until <i>k</i>points are obtained.\n\
<b>Limitation:</b> This method performs only one random initialization. \
The cluster algorithm <i>{0}</i> should be preferred.

cluster.weka.cascade = k-Means - Cascade
cluster.weka.cascade.desc = Runs simple <i>k</i>-Means algorithm for different sizes of <i>k</i>. The parameter <b>restarts</b> defines how \
many times k-Means is applied with different random intialization. Selects the best clustering result \
according to the Calinski-Harabasz criterion (see Calinski, T. and J. Harabasz. 1974. A dendrite method for cluster analysis. Commun. Stat. 3: 1-27.)

cluster.r.cascade-kmeans = k-Means - Cascade (R)
cluster.r.cascade-kmeans.desc = Uses {0}\n\
Runs <i>k</i>-Means algorithm for different sizes of <i>k</i>. Selects the best clustering result according to one of two available criteria.\n\
Details: http://cc.oulu.fi/~jarioksa/softhelp/vegan/html/cascadeKM.html

cluster.r.dynamic-hierarchical = Hierarchical - Dynamic Tree Cut (R)
cluster.r.dynamic-hierarchical.desc = Uses {0}\n\
Automatically detects clusters in the dendrogram produced by hierarchical clustering.\n\
Details: http://www.genetics.ucla.edu/labs/horvath/CoexpressionNetwork/BranchCutting \
(The <i>hybrid</i> method is used that takes the distance matrix and the dendrogram into account.)

cluster.r.hierarchical = Hierarchical (R)
cluster.r.hierarchical.desc = Uses {0}\n\
Starts with each compound as a single cluster. Subsequently merges the two most similar clusters.\n\
Similarity is computed according to the parameter <b>method</b>: \"Ward's minimum variance method aims at finding compact, \
spherical clusters. The complete linkage method finds similar clusters. The single linkage method (which is closely \
related to the minimal spanning tree) adopts a `friends of friends' clustering strategy. The other methods can be \
regarded as aiming for clusters with characteristics somewhere between the single and complete link methods.\"\n\
Details: http://svitsrv25.epfl.ch/R-doc/library/GLAD/html/hclust.html

cluster.r.kmeans = k-Means (R)
cluster.r.kmeans.desc = Uses {0}\n\
Assigns compounds to <i>k</i> randomly initialized centroids. \
Iteratively updates centroid positions and re-assigns compounds until the algorithm converges.\n\
Implementation details: http://stat.ethz.ch/R-manual/R-patched/library/stats/html/kmeans.html
				
# wizard : embedding ###################################

embed.title = Embed into 3D Space
embed.desc = Arranges the compounds and clusters in 3D space. The distance between clusters/compounds reflects their similarity according to the previously selected features.
embed.info.only-nominal = Only nominal features selected. \
Sometimes, this will result in a large number of compounds with equal feature values \
that cannot be distinguished while embedding.
embed.info.r-square = The embedding r-square value measures how good the 3d-positions reflect the features values.\n\
In more detail: it determines the correlation between the Euclidean distance matrix based on compound feature values, \
and the Euclidean distance matrix based on compound 3d positions. \
It is therefore a measure for the overall (global) embedding quality. \
The better the embedding, the closer is the r-square value to 1.\n\
This warning is expected when using Random Embedding. \
If you get this warning and your are using PCA, try to use {0} instead.\n\
If the there are too many features with too diverse values, it may be impossible to get a good overall 3D embedding at all.  

# embed methods

embed.random = No 3D Embedding (Random positions)
embed.random.desc = The compound features are ignored. This compounds are arranged randomly, equally distributed in a sphere.

embed.weka.pca = PCA 3D Embedder (WEKA)
embed.weka.pca.desc = Uses {0}\n\
Principal component analysis (PCA) is a method that reduces the feature space. The \
method transforms the original features into principal components, which are uncorrelated numerical \
features. The first, most significant 3 principal components are used for 3D Embedding.
	
embed.r.pca = PCA 3D Embedder (R)
embed.r.pca.desc = Uses {0}\n\
Principal component analysis (PCA) is a method that reduces the feature space. The \
method transforms the original features into principal components, which are uncorrelated numerical \
features. The first, most significant 3 principal components are used for 3D Embedding.\n\n\
Details: http://stat.ethz.ch/R-manual/R-patched/library/stats/html/prcomp.html

embed.r.tsne = TSNE 3D Embedder (R)
embed.r.tsne.desc = Uses {0}\n\
Performs T-Distributed Stochastic Neighbor Embedding.\n\n\
Details: http://cran.r-project.org/web/packages/tsne\n

embed.r.smacof = SMACOF 3D Embedder (R)
embed.r.smacof.desc = Uses {0}\n\
Performs Multidimensional Scaling Using Majorization: SMACOF in R.\n\n\
Details: http://cran.r-project.org/web/packages/smacof
embed.r.smacof.slow = The runtime of the optimization method SMACOF largely increases with the number of compounds. \
For datasets with more than 100 compounds, {0} should be preferred. \
For datasets with more than 50 compounds, you could try to reduce the number of iterations.

embed.r.sammon = Sammon 3D Embedder (R)
embed.r.sammon.desc = Uses {0}\n\
Performs non-metric multidimensional scaling.\n\n\
Details: http://stat.ethz.ch/R-manual/R-patched/library/MASS/html/sammon.html

# wizard: align compounds ###################################

align.title = Align Compounds
align.desc = Aligns the compounds inside a cluster with each other.
align.error.no-struct = Requires structural features, no structural features selected!

# align methods

align.no-align = No Cluster Aligner
align.no-align.desc = Does NOT align compounds. Hence, the compounds are oriented in 3D space as provided in the dataset

align.max-frag = Maximum Structural Fragment Aligner
align.max-frag.desc = Requires structural fragments as features. \
The compounds of each cluster are aligned according to their largest structural fragment that matches the complete cluster. \
Hence, their orientation in 3D space is adjusted such that the common substructure is superimposed.\n\
Uses the obfit command of {0}.
align.max-frag.short = Maximum-Fragment

align.mcs = Maximum Common Subgraph (MCS) Aligner
align.mcs.desc = First, the Maximum Common Subgraph (MCS) of each cluster is computed. \
This is computationally intensive and will take quite long for large clusters (the runtime is O(n²)).\n\
Uses {0}.\n\n\
Second the compounds of each cluster are aligned according to their MCS. \
Hence, their orientation in 3D space is adjusted such that the common substructure is superimposed.\n\
Uses the obfit command of {1}.
align.mcs.short = MCS
align.mcs.slow = MCS computation is a time consuming task. {0} should be preferred for medium-sized or large datasets (if structural fragments are available).







